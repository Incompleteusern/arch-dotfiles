 ;; Variables
(defpoll volume_percent :interval "1s" "pamixer --get-volume")
(defpoll mic_percent :interval "1s" "pactl get-source-volume @DEFAULT_SOURCE@  | awk '{gsub(\"\%\", \"\"); print $5}'")
(defpoll brightness_percent :interval "1s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll battery :interval "10s" "./scripts/battery --bat")
(defpoll battery_status :interval "10s" "./scripts/battery --bat-st")
(defpoll memory :interval "10s" "scripts/memory")
(defpoll memory_used_mb :interval "2s" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2s" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2s" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspaces :initial "[]" "bash ~/.config/hypr/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/hypr/scripts/get-active-workspace")

;; (defvar eww "eww -c $HOME/.config/eww/bar")

(defpoll COL_WLAN :interval "3s" "~/.config/eww/bar/scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "3s" "~/.config/eww/bar/scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "3s" "~/.config/eww/bar/scripts/wifi --ICON")

(deflisten song :initial "No Song" "bash ~/.config/eww/bar/scripts/music_info --song")
(deflisten song_artist :initial "No Artist" "bash ~/.config/eww/bar/scripts/music_info --artist")
(deflisten song_album :initial "No Album" "bash ~/.config/eww/bar/scripts/music_info --album")
(deflisten current_status :initial "0.0" "bash ~/.config/eww/bar/scripts/music_info --time")
(deflisten song_status :initial "󰁚" "bash ~/.config/eww/bar/scripts/music_info --status")
(deflisten cover_art :initial "images/music.png" "bash ~/.config/eww/bar/scripts/music_info --cover")

(defpoll player_active :interval "1s" "~/.config/eww/bar/scripts/music_info --active")

(defpoll clock_time :interval "1s" "date +\%I")
(defpoll clock_minute :interval "1s" "date +\%M")
(defpoll clock_date :interval "1m" "date '+%m/%d'")
(defpoll calendar_day :interval "1m" "date '+%d'")
(defpoll calendar_month :interval "1h" "date '+%m'")
(defpoll calendar_year :interval "1h" "date '+%Y'")


;; widgets

(defwidget wifi [] 
  (eventbox :onhover "${EWW_CMD} update wifi_rev=true"
			  :onhoverlost "${EWW_CMD} update wifi_rev=false"
		(box :vexpand "false" :hexpand "false" :space-evenly "false"
				(button :class "module-wif" :onclick "networkmanager_dmenu &" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
	(revealer :transition "slideright"
			  :reveal wifi_rev
			  :duration "350ms"
	(button    :class "module_essid"
			  :orientation "h"
                          :onclick "networkmanager_dmenu &"
                          ESSID_WLAN
			  )))))

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/hypr/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspaces" :space-evenly true
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )

(defwidget bat []
		(box :class "bat_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value battery
                :class "batbar"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :thickness 4
            (button 
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :wrap false
                ""))))


(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value memory
                :class "membar"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :wrap false
                ""))))


(defwidget cpu []
		(box :class "cpu_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value {EWW_CPU.avg}
                :class "cpubar"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :thickness 4
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "using ${round(EWW_CPU.avg, 0)}% on avg"
                :onclick "$HOME/.config/eww/bar/scripts/pop system"
                :wrap false
                ""))))
(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "${EWW_CMD} update time_rev=true"
			  :onhoverlost "${EWW_CMD} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3" 
      (label :text clock_time :class "clock_time_class" )
      (label :text "󰇙" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
	  (revealer :transition "slideleft"
			  :reveal time_rev
			  :duration "350ms"
      (button :class "clock_date_class"
             :onclick "$HOME/.config/eww/bar/scripts/pop calendar" clock_date
        )
  ))))
  
(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update vol_reveal=true"
			  :onhoverlost "${EWW_CMD} update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
	(button   :onclick "scripts/pop audio"   :class "volume_icon" "")
	(revealer :transition "slideleft"
			  :reveal vol_reveal
			  :duration "350ms"
	(scale    :class "volbar"
			  :value volume_percent
			  :orientation "h"
			  :tooltip "${volume_percent}%"
			  :max 101
			  :min 0
			  :onchange "pamixer --set-volume {}" )))))

(defwidget bright []
  (eventbox :onhover "${EWW_CMD} update br_reveal=true" :onhoverlost "${EWW_CMD} update br_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text "" :class "bright_icon" :tooltip "brightness")
	(revealer :transition "slideleft"
			  :reveal br_reveal
			  :duration "350ms"
	(scale    :class "brightbar"
			  :value brightness_percent
			  :orientation "h"
			  :tooltip "${brightness_percent}%"
			  :max 101
			  :min 0
			  :onchange "brightnessctl set {}%" )))))



	;;  Music 
   (defwidget music [] 
    (eventbox :onhover "${EWW_CMD} update music_reveal=true"
			  :onhoverlost "${EWW_CMD} update music_reveal=false"
		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style {player_active ? "background-image: url(\'${cover_art}\');" : "background-image: url('images/music.png');"})
			(button :class "song" :wrap "true" :onclick "~/.config/eww/bar/scripts/pop music" 
        (label :limit-width 30 :text {player_active ? song : "No Song"})
      )
	    (revealer :transition "slideright"
			      :reveal music_reveal
			      :duration "350ms"
            (box :vexpand "false" :hexpand "false" :orintation "h"
                      (button :class "song_btn_prev" :onclick "~/.config/eww/bar/scripts/music_info --prev" "")
					(button :class "song_btn_play" :onclick "~/.config/eww/bar/scripts/music_info --toggle" song_status)
					(button :class "song_btn_next" :onclick "~/.config/eww/bar/scripts/music_info --next" ""))))))

(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "left_modules"
(bright)
(volume)
(wifi)
(sep)
(bat)
(mem)
(cpu)
(sep)
(clock_module)))


(defwidget right []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "right_modules"
(workspaces)))


(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(music)
))

(defwidget bar_1 []
  (box :class "bar_class"
       :orientation "h"
  (right)
  (center)
  (left)
    ))

(defwindow bar
          :geometry (geometry :x "0%"
                       :y "10px"
                       :width "97%"
                       :height "40px"
                       :anchor "top center")
          :stacking "fg"
          :monitor 0
	  :focusable false
          :exclusive true
  (bar_1))
      
(defwidget core [value]
    (scale
        :class "core"
        :value {value}
        :orientation "v"
        :flipped "true"
        :max 101
        :min 0
    )
)

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                
                :wrap false)
            (label :text "${battery}% Power"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_cpu_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value {EWW_CPU.avg}
                :class "sys_cpu"
                :thickness 9
            (label :text ""
                :class "sys_icon_cpu"
                :limit-width 2
                
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "cpu"
                :halign "start"
                :class "sys_text_cpu"
                :limit-width 9
                
                :wrap false)
            (label :text "${round(EWW_CPU.avg, 0)}% average"
                :halign "start"
                :class "sys_text_cpu_sub"
                :limit-width 22
                
                :wrap false)

            (box :class "cores" :orientation "h"
              (core :value {EWW_CPU.cores[0].usage})
              (core :value {EWW_CPU.cores[1].usage})
              (core :value {EWW_CPU.cores[2].usage})
              (core :value {EWW_CPU.cores[3].usage})
              (core :value {EWW_CPU.cores[4].usage})
              (core :value {EWW_CPU.cores[5].usage})
              (core :value {EWW_CPU.cores[6].usage})
              (core :value {EWW_CPU.cores[7].usage})
              (core :value {EWW_CPU.cores[8].usage})
              (core :value {EWW_CPU.cores[9].usage})
              (core :value {EWW_CPU.cores[10].usage})
              (core :value {EWW_CPU.cores[11].usage})
            )

      )
)
))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day
                          :month calendar_month 
			  :year calendar_year))))

(defwindow calendar
	:geometry (geometry :x "20px" 
						:y "6%" 
                        :anchor "top right"
						:width "270px" 
						:height "60px")
        :monitor 0
        :focusable false
        :exclusive true
(cal))



(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "speaker_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value volume_percent
              :space-evenly "false"
			  :orientation "h"
			  :onchange "pamixer --set-volume {}" 
              :tooltip "volume on ${volume_percent}%"
			  :max 101
			  :min 0))))
            (label :text "" :class "audio_sep" :halign "center")
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
              :space-evenly "false"
			  :orientation "h"
              :tooltip "mic on ${mic_percent}%"
			  :onchange "pactl set-source-volume @DEFAULT_SOURCE@ {}%" 
			  :max 101
			  :min 0))))))

(defwindow audio_ctl
	:geometry (geometry :x "20px" 
						:y "6%" 
                        :anchor "top right"
						:width "280px" 
						:height "60px")
        :monitor 0
        :focusable false
        :exclusive true
(audio))


(defwindow system
	:geometry (geometry :x "20px" 
						:y "6%" 
                        :anchor "top right"
						:width "290px" 
						:height "120px")
        :monitor 0
        :focusable false
        :exclusive true
(system))



;;  Music
(defwidget music_pop []
		(box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "music_cover_art" :vexpand "false" :hexpand "false" :style {player_active ? "background-image: url(\'${cover_art}\');" : "background-image: url('images/music.png');"})
			(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :halign "center" :class "music" :wrap "true" :limit-width 20 :text {player_active ? song : "No Song"})
				(label :halign "center" :class "music_artist" :wrap "true" :limit-width 20 :text {player_active ? song_artist : "No Artist"})
        (label :halign "center" :class "music_album" :wrap "true" :limit-width 20 :text {player_active ? song_album : "No Album"})
				(box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
					(button :class "music_btn_prev" :onclick "~/.config/eww/bar/scripts/music_info --prev" "")
					(button :class "music_btn_play" :onclick "~/.config/eww/bar/scripts/music_info --toggle" song_status)
					(button :class "music_btn_next" :onclick "~/.config/eww/bar/scripts/music_info --next" ""))
				(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
					(scale :onchange "~/.config/eww/bar/scripts/music_info --position {}" :min 0 :max 100 :value {player_active ? current_status : 0.0 })))))


;;  music
		(defwindow music_win :stacking "fg" :focusable "false" :screen 1
    			    :geometry (geometry :x "0" :y "6%" :width 428 :height 104 :anchor "top center")
        :monitor 0
					(music_pop))


